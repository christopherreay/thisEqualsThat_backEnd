<?php
/**
 * @file
 * An example field using the Field Types API.
 */

/**
 * @defgroup field_example Example: Field Types API
 * @ingroup examples
 * @{
 * Examples using Field Types API.
 *
 * This is updated from Barry Jaspan's presentation at Drupalcon Paris,
 * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
 *
 * Providing a field requires:
 * - Defining a field:
 *   - hook_field_info()
 *   - hook_field_schema()
 *   - hook_field_validate()
 *   - hook_field_is_empty()
 *
 * - Defining a formatter for the field (the portion that outputs the field for
 *   display):
 *   - hook_field_formatter_info()
 *   - hook_field_formatter_view()
 *
 * - Defining a widget for the edit form:
 *   - hook_field_widget_info()
 *   - hook_field_widget_form()
 *
 * Our module defines the field in field_example_field_info(),
 * field_example_field_validate() and field_example_field_is_empty().
 * field_example_field_schema() is implemented in field_example.install.
 *
 * Our module sets up a formatter in field_example_field_formatter_info() and
 * field_example_field_formatter_view(). These are the API hooks that present
 * formatted and themed output to the user.

 * And finally, our module defines the widet in
 * field_example_field_widget_info() and field_example_field_widget_form().
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 *
 * @see field_types
 * @see field
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function field_annotation_field_svg_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'field_faf_svg' => array(
      'label'             => t('SVG Annotation Field'),
      'description'       => t('Augment the information stored about a field so that it provides all the details requried to generate SVG Visualisation'),
      'default_widget'    => 'field_faf_svg_widget',
      'default_formatter' => 'field_faf_svg_formatter',
      'settings'          => array(
          "setting"   => "default setting",
      ),
      'instance_settings'     => array(
          "annotated_field"         => Null,
          "import_on_save"          => 0,
          "svg_component"           => Null,
          "parameter_type"          => "range",
          "unit_before"             => "",
          "unit_after"              => "",
          "range_lower"             => Null,
          "range_higher"            => Null,
          "range_step"              => Null,
          "range_options"           => Null,
          "range_option_svg_urls"   => Null,
      ),
    ),
  );
}

function field_annotation_field_svg_field_settings_form($field, $instance, $has_data) 
{ $settings = $field['settings'];

  $form = array();
  $form['setting'] = array(
    '#type' => 'textfield',
    '#title' => 'setting',
    '#description' => "A Setting",
    '#default_value' => $settings['setting'],
  );
  
  return $form;
}

function faf_svg_get_parameter_types()
{ $list_of_parameter_types = 
    array(  "range" => "Range", "select" => "Select"
    );
    
  return $list_of_parameter_types;
}

class FAF_svg_range_slice
{ public $lower_range = None;
  public $upper_range = None;
  
  public $php_code = "";
  

}

function field_annotation_field_svg_field_instance_settings_form($field, $instance) 
{ $settings = $instance['settings'];

  dpm($instance);
  
  $listOfFields = field_info_instances($instance['entity_type'], $instance['bundle']);
  unset($listOfFields[$instance['field_name']]);
  $options = faf_svg_generate_bundle_field_options($listOfFields);

  $form = array();
  $form['annotated_field']  = array(
        '#title'          => 'Annotated Field',
        '#description'    => "Which field is to be annotated",
        '#type'           => 'select',
        '#options'        => $options,
        '#default_value'  => $settings['annotated_field'],
  );
  
  $form['import_on_save']    = array(
        '#title'          => 'Import On Save',
        '#description'    => "If this check box is ticked, any applicable values will be imported from the Field Settings of the Annotated Field when Field Settings are saved.",
        '#type'           => 'checkbox',
        '#default_value'  => $settings['import_on_save'],
  );
  
  $form['svg_component']    = array(
        '#title'          => 'SVG Component',
        '#description'    => "What SVG component should represent this parameter on the SVG image of the model. This should be a full or partial URL",
        '#type'           => 'textfield',
        '#default_value'  => $settings['svg_component'],
  );
  
  $form['parameter_type']   = array(
        '#title'          => 'Parameter Type',
        '#description'    => "What step should a numeric range have",
        '#type'           => 'select',
        '#options'        => faf_svg_get_parameter_types(),
        '#default_value'  => $settings['parameter_type'],
  );
  $form['unit_before']             = array(
        '#title'          => 'Unit Before (e.g. $ or Â£)',
        '#description'    => "Enter like this: 'pound|pounds' for singular and plural",
        '#type'           => 'textfield',
        '#default_value'  => $settings['unit_before'],
  );
  $form['unit_after']             = array(
        '#title'          => 'Unit After (e.g pound|pounds or mile|miles)',
        '#description'    => "Enter like this: 'pound|pounds' for singular and plural",
        '#type'           => 'textfield',
        '#default_value'  => $settings['unit_after'],
  );
  $form['range_lower']      = array(
        '#title'          => 'Range Lower',
        '#description'    => "Minimum value for this paramter",
        '#type'           => 'textfield',
        '#default_value'  => $settings['range_lower'],
  );
  $form['range_higher']      = array(
        '#title'          => 'Range Higher',
        '#description'    => "Maximum value for this parameter",
        '#type'           => 'textfield',
        '#default_value'  => $settings['range_higher'],
  );
  $form['range_step']       = array(
        '#title'          => 'Range Step',
        '#description'    => "What step should a numeric range have on the interface",
        '#type'           => 'textfield',
        '#default_value'  => $settings['range_step'],
  );
  $form['range_options']    = array(
        '#title'          => 'Range Options',
        '#description'    => "List (usually fairly small) of possible values this parameter may take. <br><br>Separate options with a newline<br><b>Format:</b> machine_name<b style='font-size: 1.2em;'>|</b>Label Name",
        '#type'           => 'textarea',
        '#default_value'  => $settings['range_options'],
  );  
  $form['range_option_svg_urls']    = array(
        '#title'          => 'Range Option SVG URLs',
        '#description'    => "Each Range Option can have its own icon. Enter one URL for each of the lines in the Range Options above",
        '#type'           => 'textarea',
        '#default_value'  => $settings['range_options'],
  );
  
  
  
 
  
  return $form;
}

function faf_svg_generate_bundle_field_options($bundle_fields)
{ $options = array();
  foreach ($bundle_fields as $field_name => $field)
  { $options[$field_name] = $field['label'];
  }
  return $options;
}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function field_annotation_field_svg_field_is_empty($item, $field) {
  //dpm("Is Empty");
  //dpm($item);
  return empty($item['value']);
}


/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see field_example_field_formatter_view()
 */
function field_annotation_field_svg_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'field_faf_svg_formatter' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('field_faf_svg'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - field_example_simple_text just outputs markup indicating the color that
 *   was entered and uses an inline style to set the text color to that value.
 * - field_example_color_background does the same but also changes the
 *   background color of div.region-content.
 *
 * @see field_example_field_formatter_info()
 */
function field_annotation_field_svg_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $colors = array("red", "black");

  $element = array();
  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'field_faf_svg_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          // We create a render array to produce the desired markup,
          // "<p style="color: #hexcolor">The color code ... #hexcolor</p>".
          // See theme_html_tag().
          '#type' => 'html_tag',
          '#tag' => 'p',
          '#attributes' => array(
            'style' => 'color: ' . $item['value'],
          ),
          '#value' => t('The color code in this field is @code', array('@code' => $item['value'])),
        );
      }
      break;

    // This formatter adds css to the page changing the '.region-content' area's
    // background color. If there are many fields, the last one will win.

 
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see field_example_field_widget_form()
 */
function field_annotation_field_svg_field_widget_info() {
  return array(
    'field_faf_svg_widget' => array(
      'label' => t('FAF SVG WIDGET'),
      'field types' => array('field_faf_svg'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'field_example_colorpicker' and 'field_example_text' are essentially
 * the same, but field_example_colorpicker adds a javascript colorpicker
 * helper.
 *
 * field_example_3text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'rgb' form element.
 */
function field_annotation_field_svg_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    
    case 'field_faf_svg_widget':
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        // Allow a slightly larger size that the field length to allow for some
        // configurations where all characters won't fit in input field.
        '#size' => 1,
        '#maxlength' => 1,
      );
      break;

  }

  $element['value'] = $widget;
  return $element;
}


